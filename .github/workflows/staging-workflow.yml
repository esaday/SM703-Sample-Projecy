name: Staging Workflow - Test and deploy to staging

on:
  pull_request:
    branches: [ develop ]

env:
  TF_WORKSPACE: "staging"
  # TF_LOG: "DEBUG"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Upload jar
      uses: actions/upload-artifact@v2
      with:
        name: jar
        path: target/SM703-1.0-SNAPSHOT.jar

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Run Unit Tests with Maven
      run: mvn -B test --file pom.xml


  upload-to-s3:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Make artifact directory
        run: mkdir -p ./artifacts/${{ github.repository }}

      - name: Download jar
        uses: actions/download-artifact@v2
        with:
          name: jar
          path: artifacts/${{ github.repository }}

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: artifacts/${{ github.repository }}

      - name: Rename jar
        run: |
          mv artifacts/${{ github.repository }}/SM703-1.0-SNAPSHOT.jar artifacts/${{ github.repository }}/${{ github.sha }}.jar

      - name: Push Zip to S3
        uses: jakejarvis/s3-sync-action@v0.3.1
        env:
          SOURCE_DIR: './artifacts'
          AWS_REGION: 'eu-west-1'
          AWS_S3_BUCKET: esad-703-jars
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-infra:
    needs: upload-to-s3
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Check out code
      uses: actions/checkout@v2
      
    - name: Run Terrascan
      id: terrascan
      uses: accurics/terrascan-action@main
      with:
        iac_type: 'terraform'
        iac_version: 'v14'
        policy_type: 'aws'
        only_warn: true
        iac_dir: tf

    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Terraform
      env:
        TERRAFORM_VERSION: "1.0.2"
      run: |
        tf_version=$TERRAFORM_VERSION
        wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
        unzip terraform_"$tf_version"_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
    - name: Verify Terraform version
      run: terraform --version
      working-directory: tf
    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform init -backend-config=bucket=esad-703-tf-state -backend-config=key=environment/$TF_WORKSPACE.tfstate
      working-directory: tf

    - name: Terraform Validate
      run: terraform validate
      working-directory: tf

    - name: Terraform plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_s3_artifact_bucket: esad-703-jars
        TF_VAR_s3_artifact_key: ${{ github.repository }}/${{ github.sha }}.jar
      id: plan
      run: terraform plan -no-color -out dev.tfplan
      working-directory: tf

    - name: Terraform Apply
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_s3_artifact_bucket: esad-703-jars
        TF_VAR_s3_artifact_key: ${{ github.repository }}/${{ github.sha }}.jar
      run: terraform apply dev.tfplan
      working-directory: tf